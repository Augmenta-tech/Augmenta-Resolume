/*{
	"DESCRIPTION": "Your shader description",
	"CREDIT": "by you",
	"CATEGORIES": [],
	"INPUTS": [
	{
	      "NAME" : "color",
      "TYPE" : "color",
      "DEFAULT" : [
        1,
        1,
        1,
        1.0
      ]
	},
	{
	   "NAME" : "innerIntensity",
      "TYPE" : "float",
      "DEFAULT" : 0,
		 "MIN": -1,
      "MAX": 1
	},
    {
	   "NAME" : "outerIntensity",
      "TYPE" : "float",
      "DEFAULT" : 1,
		 "MIN": 0,
      "MAX": 1
	},
	{
      "NAME": "noiseZoom",
      "TYPE": "float",
      "DEFAULT": .5,
      "MIN": 0,
      "MAX": 1
    },
		{
      "NAME": "noiseIntensity",
      "TYPE": "float",
      "DEFAULT": .5,
      "MIN": 0,
      "MAX": 1
    },
	{
      "NAME": "noiseSpeed",
      "TYPE": "float",
      "DEFAULT": .5,
      "MIN": 0,
      "MAX": 1
    },
	{
      "NAME": "augmentaNumPoints",
      "TYPE": "float",
      "DEFAULT": 20,
      "MIN": 0,
      "MAX": 100
    },
	
	
    {
      "NAME": "augmentaData",
      "TYPE": "image"
    }
    ]
}*/

//please help me, how i can repeat this image (texture)
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}

float snoise(vec3 v){
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 );
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
}



vec4 drawRectangle(vec2 pMin, vec2 pMax)
{
    vec2 p1 = vec2(pMin.x, pMin.y);
    vec2 p2 = vec2(pMax.x, pMax.y);
    vec2 p3 = vec2(pMin.x, pMax.y);
    vec2 p4 = vec2(pMax.x, pMin.y);

	vec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;
	float noiseFac = snoise(vec3(gl_FragCoord.x*0.1*noiseZoom,gl_FragCoord.y*0.1*noiseZoom,TIME*noiseSpeed*0.01));
    uv += vec2(noiseFac*noiseIntensity*0.1);
	 
   float d1 = step(p1.x,uv.x)*step(uv.x,p4.x)*abs(uv.y-p1.y)+
        step(uv.x,p1.x)*distance(uv,p1)+step(p4.x,uv.x)*distance(uv,p4);
    d1 = min(step(p3.x,uv.x)*step(uv.x,p2.x)*abs(uv.y-p2.y)+
        step(uv.x,p3.x)*distance(uv,p3)+step(p2.x,uv.x)*distance(uv,p2),d1);
    d1 = min(step(p1.y,uv.y)*step(uv.y,p3.y)*abs(uv.x-p1.x)+
        step(uv.y,p1.y)*distance(uv,p1)+step(p3.y,uv.y)*distance(uv,p3),d1);
    d1 = min(step(p4.y,uv.y)*step(uv.y,p2.y)*abs(uv.x-p2.x)+
        step(uv.y,p4.y)*distance(uv,p4)+step(p2.y,uv.y)*distance(uv,p2),d1);
     
	float fac = .01 / abs(d1 + 1/100.);
	
	if(uv.x > pMin.x && uv.x < pMax.x && uv.y > pMin.y && uv.y < pMax.y)
	{
		fac += innerIntensity;
	}else
	{
		fac *= outerIntensity;
	}
	
	vec4 result = vec4(fac * color.rgb, 1.0);;
	return result;
}

void main() {
   
    vec4 colorOut = vec4(0,0,0,1);
	
	for(float i=0;i<100;++i)
    { 
    if(i > augmentaNumPoints) break;
	
    // Get the point
	  float uvX = (i+.5)/augmentaNumPoints;
      vec4 zone = texture2D(augmentaData, vec2(uvX,0));
	  vec2 pMin = vec2(zone.x, 1-zone.y-zone.w);
	  vec2 pMax = pMin + vec2(zone.z, zone.w);	  
		 
	 if(pMin.x == pMax.x || pMin.y == pMax.y || pMin.x >= 1 || pMin.y <= 0) continue;
	 colorOut += drawRectangle(pMin, pMax);
	 //colorOut += drawCircle(point.xy, point.z, point.w, size, edgeBlur);
    }
	
	gl_FragColor = colorOut;
}